---
source: crates/ruff_linter/src/rules/pyupgrade/mod.rs
---
UP008.py:17:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
   |
16 |     def wrong(self):
17 |         parent = super(Child, self)  # wrong
   |                       ^^^^^^^^^^^^^ UP008
18 |         super(Child, self).method  # wrong
19 |         super(
   |
   = help: Remove `super()` parameters

ℹ Safe fix
14 14 |         Parent.super(1, 2)  # ok
15 15 | 
16 16 |     def wrong(self):
17    |-        parent = super(Child, self)  # wrong
   17 |+        parent = super()  # wrong
18 18 |         super(Child, self).method  # wrong
19 19 |         super(
20 20 |             Child,

UP008.py:18:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
   |
16 |     def wrong(self):
17 |         parent = super(Child, self)  # wrong
18 |         super(Child, self).method  # wrong
   |              ^^^^^^^^^^^^^ UP008
19 |         super(
20 |             Child,
   |
   = help: Remove `super()` parameters

ℹ Safe fix
15 15 | 
16 16 |     def wrong(self):
17 17 |         parent = super(Child, self)  # wrong
18    |-        super(Child, self).method  # wrong
   18 |+        super().method  # wrong
19 19 |         super(
20 20 |             Child,
21 21 |             self,

UP008.py:19:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
   |
17 |           parent = super(Child, self)  # wrong
18 |           super(Child, self).method  # wrong
19 |           super(
   |  ______________^
20 | |             Child,
21 | |             self,
22 | |         ).method()  # wrong
   | |_________^ UP008
   |
   = help: Remove `super()` parameters

ℹ Safe fix
16 16 |     def wrong(self):
17 17 |         parent = super(Child, self)  # wrong
18 18 |         super(Child, self).method  # wrong
19    |-        super(
20    |-            Child,
21    |-            self,
22    |-        ).method()  # wrong
   19 |+        super().method()  # wrong
23 20 | 
24 21 | 
25 22 | class BaseClass:

UP008.py:36:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
   |
34 | class MyClass(BaseClass):
35 |     def normal(self):
36 |         super(MyClass, self).f()  # can use super()
   |              ^^^^^^^^^^^^^^^ UP008
37 |         super().f()
   |
   = help: Remove `super()` parameters

ℹ Safe fix
33 33 | 
34 34 | class MyClass(BaseClass):
35 35 |     def normal(self):
36    |-        super(MyClass, self).f()  # can use super()
   36 |+        super().f()  # can use super()
37 37 |         super().f()
38 38 | 
39 39 |     def different_argument(self, other):

UP008.py:50:18: UP008 [*] Use `super()` instead of `super(__class__, self)`
   |
49 |         def inner_argument(self):
50 |             super(MyClass, self).f()  # can use super()
   |                  ^^^^^^^^^^^^^^^ UP008
51 |             super().f()
   |
   = help: Remove `super()` parameters

ℹ Safe fix
47 47 |             super(MyClass, self).f()  # CANNOT use super()
48 48 | 
49 49 |         def inner_argument(self):
50    |-            super(MyClass, self).f()  # can use super()
   50 |+            super().f()  # can use super()
51 51 |             super().f()
52 52 | 
53 53 |         outer_argument()

UP008.py:74:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
   |
72 | class DataClass:
73 |     def normal(self):
74 |         super(DataClass, self).f()  # Error
   |              ^^^^^^^^^^^^^^^^^ UP008
75 |         super().f()  # OK
   |
   = help: Remove `super()` parameters

ℹ Safe fix
71 71 | @dataclass
72 72 | class DataClass:
73 73 |     def normal(self):
74    |-        super(DataClass, self).f()  # Error
   74 |+        super().f()  # Error
75 75 |         super().f()  # OK
76 76 | 
77 77 | 

UP008.py:92:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
   |
90 | class B(A):
91 |     def bar(self):
92 |         super(__class__, self).foo()
   |              ^^^^^^^^^^^^^^^^^ UP008
   |
   = help: Remove `super()` parameters

ℹ Safe fix
89 89 | 
90 90 | class B(A):
91 91 |     def bar(self):
92    |-        super(__class__, self).foo()
   92 |+        super().foo()
93 93 | 
94 94 | 
95 95 | # see: https://github.com/astral-sh/ruff/issues/18684

UP008.py:113:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
111 |   class ClassForCommentEnthusiasts(BaseClass):
112 |       def with_comments(self):
113 |           super(
    |  ______________^
114 | |             # super helpful comment
115 | |             ClassForCommentEnthusiasts,
116 | |             self
117 | |         ).f()
    | |_________^ UP008
118 |           super(
119 |               ClassForCommentEnthusiasts,
    |
    = help: Remove `super()` parameters

ℹ Unsafe fix
110 110 | # see: https://github.com/astral-sh/ruff/issues/18533
111 111 | class ClassForCommentEnthusiasts(BaseClass):
112 112 |     def with_comments(self):
113     |-        super(
114     |-            # super helpful comment
115     |-            ClassForCommentEnthusiasts,
116     |-            self
117     |-        ).f()
    113 |+        super().f()
118 114 |         super(
119 115 |             ClassForCommentEnthusiasts,
120 116 |             # even more helpful comment

UP008.py:118:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
116 |               self
117 |           ).f()
118 |           super(
    |  ______________^
119 | |             ClassForCommentEnthusiasts,
120 | |             # even more helpful comment
121 | |             self
122 | |         ).f()
    | |_________^ UP008
123 |           super(
124 |               ClassForCommentEnthusiasts,
    |
    = help: Remove `super()` parameters

ℹ Unsafe fix
115 115 |             ClassForCommentEnthusiasts,
116 116 |             self
117 117 |         ).f()
118     |-        super(
119     |-            ClassForCommentEnthusiasts,
120     |-            # even more helpful comment
121     |-            self
122     |-        ).f()
    118 |+        super().f()
123 119 |         super(
124 120 |             ClassForCommentEnthusiasts,
125 121 |             self

UP008.py:123:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
121 |               self
122 |           ).f()
123 |           super(
    |  ______________^
124 | |             ClassForCommentEnthusiasts,
125 | |             self
126 | |             # also a comment
127 | |         ).f()
    | |_________^ UP008
    |
    = help: Remove `super()` parameters

ℹ Unsafe fix
120 120 |             # even more helpful comment
121 121 |             self
122 122 |         ).f()
123     |-        super(
124     |-            ClassForCommentEnthusiasts,
125     |-            self
126     |-            # also a comment
127     |-        ).f()
    123 |+        super().f()
128 124 | 
129 125 | 
130 126 | # Issue #19096: super calls with keyword arguments should emit diagnostic but not be fixed

UP008.py:133:21: UP008 Use `super()` instead of `super(__class__, self)`
    |
131 | class Ord(int):
132 |     def __len__(self):
133 |         return super(Ord, self, uhoh=True, **{"error": True}).bit_length()
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
134 |
135 | class ExampleWithKeywords:
    |
    = help: Remove `super()` parameters

UP008.py:137:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
135 | class ExampleWithKeywords:
136 |     def method1(self):
137 |         super(ExampleWithKeywords, self, invalid=True).some_method()  # Should emit diagnostic but NOT be fixed
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
138 |     
139 |     def method2(self):
    |
    = help: Remove `super()` parameters

UP008.py:140:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
139 |     def method2(self):
140 |         super(ExampleWithKeywords, self, **{"kwarg": "value"}).some_method()  # Should emit diagnostic but NOT be fixed
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
141 |     
142 |     def method3(self):
    |
    = help: Remove `super()` parameters

UP008.py:143:14: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
142 |     def method3(self):
143 |         super(ExampleWithKeywords, self).some_method()  # Should be fixed - no keywords
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
144 |
145 | # See: https://github.com/astral-sh/ruff/issues/19357
    |
    = help: Remove `super()` parameters

ℹ Safe fix
140 140 |         super(ExampleWithKeywords, self, **{"kwarg": "value"}).some_method()  # Should emit diagnostic but NOT be fixed
141 141 |     
142 142 |     def method3(self):
143     |-        super(ExampleWithKeywords, self).some_method()  # Should be fixed - no keywords
    143 |+        super().some_method()  # Should be fixed - no keywords
144 144 | 
145 145 | # See: https://github.com/astral-sh/ruff/issues/19357
146 146 | # Must be detected

UP008.py:154:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
152 |     def f(self):
153 |         if False: __class__ # Python injects __class__ into scope
154 |         builtins.super(ChildD1, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
155 |
156 | class ChildD2(ParentD):
    |
    = help: Remove `super()` parameters

ℹ Safe fix
151 151 | class ChildD1(ParentD):
152 152 |     def f(self):
153 153 |         if False: __class__ # Python injects __class__ into scope
154     |-        builtins.super(ChildD1, self).f()
    154 |+        builtins.super().f()
155 155 | 
156 156 | class ChildD2(ParentD):
157 157 |     def f(self):

UP008.py:159:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
157 |     def f(self):
158 |         if False: super # Python injects __class__ into scope
159 |         builtins.super(ChildD2, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
160 |
161 | class ChildD3(ParentD):
    |
    = help: Remove `super()` parameters

ℹ Safe fix
156 156 | class ChildD2(ParentD):
157 157 |     def f(self):
158 158 |         if False: super # Python injects __class__ into scope
159     |-        builtins.super(ChildD2, self).f()
    159 |+        builtins.super().f()
160 160 | 
161 161 | class ChildD3(ParentD):
162 162 |     def f(self):

UP008.py:163:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
161 | class ChildD3(ParentD):
162 |     def f(self):
163 |         builtins.super(ChildD3, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
164 |         super # Python injects __class__ into scope
    |
    = help: Remove `super()` parameters

ℹ Safe fix
160 160 | 
161 161 | class ChildD3(ParentD):
162 162 |     def f(self):
163     |-        builtins.super(ChildD3, self).f()
    163 |+        builtins.super().f()
164 164 |         super # Python injects __class__ into scope
165 165 | 
166 166 | import builtins as builtins_alias

UP008.py:169:29: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
167 | class ChildD4(ParentD):
168 |     def f(self):
169 |         builtins_alias.super(ChildD4, self).f()
    |                             ^^^^^^^^^^^^^^^ UP008
170 |         super # Python injects __class__ into scope
    |
    = help: Remove `super()` parameters

ℹ Safe fix
166 166 | import builtins as builtins_alias
167 167 | class ChildD4(ParentD):
168 168 |     def f(self):
169     |-        builtins_alias.super(ChildD4, self).f()
    169 |+        builtins_alias.super().f()
170 170 |         super # Python injects __class__ into scope
171 171 | 
172 172 | class ChildD5(ParentD):

UP008.py:176:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
174 |         super = 1
175 |         super # Python injects __class__ into scope
176 |         builtins.super(ChildD5, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
177 |
178 | class ChildD6(ParentD):
    |
    = help: Remove `super()` parameters

ℹ Safe fix
173 173 |     def f(self):
174 174 |         super = 1
175 175 |         super # Python injects __class__ into scope
176     |-        builtins.super(ChildD5, self).f()
    176 |+        builtins.super().f()
177 177 | 
178 178 | class ChildD6(ParentD):
179 179 |     def f(self):

UP008.py:182:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
180 |         super: "Any"
181 |         __class__ # Python injects __class__ into scope
182 |         builtins.super(ChildD6, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
183 |
184 | class ChildD7(ParentD):
    |
    = help: Remove `super()` parameters

ℹ Safe fix
179 179 |     def f(self):
180 180 |         super: "Any"
181 181 |         __class__ # Python injects __class__ into scope
182     |-        builtins.super(ChildD6, self).f()
    182 |+        builtins.super().f()
183 183 | 
184 184 | class ChildD7(ParentD):
185 185 |     def f(self):

UP008.py:188:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
186 |         def x():
187 |             __class__ # Python injects __class__ into scope
188 |         builtins.super(ChildD7, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
189 |
190 | class ChildD8(ParentD):
    |
    = help: Remove `super()` parameters

ℹ Safe fix
185 185 |     def f(self):
186 186 |         def x():
187 187 |             __class__ # Python injects __class__ into scope
188     |-        builtins.super(ChildD7, self).f()
    188 |+        builtins.super().f()
189 189 | 
190 190 | class ChildD8(ParentD):
191 191 |     def f(self):

UP008.py:195:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
193 |             super = 1
194 |         super # Python injects __class__ into scope
195 |         builtins.super(ChildD8, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
196 |
197 | class ChildD9(ParentD):
    |
    = help: Remove `super()` parameters

ℹ Safe fix
192 192 |         def x():
193 193 |             super = 1
194 194 |         super # Python injects __class__ into scope
195     |-        builtins.super(ChildD8, self).f()
    195 |+        builtins.super().f()
196 196 | 
197 197 | class ChildD9(ParentD):
198 198 |     def f(self):

UP008.py:202:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
200 |             __class__ = 1
201 |         __class__ # Python injects __class__ into scope
202 |         builtins.super(ChildD9, self).f()
    |                       ^^^^^^^^^^^^^^^ UP008
203 |
204 | class ChildD10(ParentD):
    |
    = help: Remove `super()` parameters

ℹ Safe fix
199 199 |         def x():
200 200 |             __class__ = 1
201 201 |         __class__ # Python injects __class__ into scope
202     |-        builtins.super(ChildD9, self).f()
    202 |+        builtins.super().f()
203 203 | 
204 204 | class ChildD10(ParentD):
205 205 |     def f(self):

UP008.py:209:23: UP008 [*] Use `super()` instead of `super(__class__, self)`
    |
207 |             __class__ = 1
208 |         super # Python injects __class__ into scope
209 |         builtins.super(ChildD10, self).f()
    |                       ^^^^^^^^^^^^^^^^ UP008
    |
    = help: Remove `super()` parameters

ℹ Safe fix
206 206 |         def x():
207 207 |             __class__ = 1
208 208 |         super # Python injects __class__ into scope
209     |-        builtins.super(ChildD10, self).f()
    209 |+        builtins.super().f()
210 210 | 
211 211 | 
212 212 | # Must be ignored
